#! /usr/bin/env hhvm
<?hh

if(substr(php_sapi_name(), 0, 3) !== 'cli'){
    http_response_code(404);
    die();
}

// Find the composer autoloader
$basedir = __DIR__;

do {
    if(file_exists($basedir . '/composer.json') && file_exists($basedir . '/vendor/autoload.php')){
        require_once($basedir . '/vendor/autoload.php');
        break;
    }
    $basedir = dirname($basedir);
    if($basedir === '/'){
        die('You need to set up the project dependencies using the following commands:' . PHP_EOL .
            'curl -s http://getcomposer.org/installer | php' . PHP_EOL .
            'php composer.phar install' . PHP_EOL);
    }
} while(true);

chdir($basedir);

$options = Map::fromArray(getopt('h', ['install-path:', 'help']));
if($options->containsKey('h') || $options->containsKey('help')) {
    die('scanroutes <path/to/files> ... [--excludes=<space delimited list of exclude paths>] [--install-path=<path to install router>]');
}

$installPath = array_key_exists('install-path', $options) ? realpath($options['install-path']) : $basedir;

if(
    !is_dir($installPath) &&
    !mkdir($installPath, true)
) {
    die('Unable to create the install path ' . $installPath);
}

$cliargs = Vector::fromItems($argv);
$cliargs->removeKey(0);
if($cliargs->isEmpty()) {
    $cliargs[] = './';
}

$include = Set{};
$exclude = Set{};
$exFlag = false;
foreach($cliargs as $arg) {
    if($arg === 'exclude') {
        $exFlag = true;
        continue;
    }

    $rp = realpath($arg);
    if($rp === false) {
        continue;
    }

    if($exFlag) {
        $exclude[] = $arg;
    } else {
        $include[] = $arg;
    }
}

use kilahm\AttributeRouter\RouteCompiler;
echo 'Compiling routes to ' . $installPath . PHP_EOL;
RouteCompiler::factory($include, $exclude)->compile($installPath);
